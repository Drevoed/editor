{"version":3,"file":"indent-paragraph.js","sourceRoot":"","sources":["indent-paragraph.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAA;AAChD,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,OAAO,CAAA;AACjD,OAAO,EACL,iBAAiB,EACjB,qBAAqB,EACrB,aAAa,GACd,MAAM,sBAAsB,CAAA;AAG7B,OAAO,EAAE,cAAc,EAAE,MAAM,8BAA8B,CAAC;AAE9D,MAAM,UAAU,eAAe,CAAC,MAAc;IAC5C,IAAI,CAAC,MAAM,CAAC,SAAS;QAAE,OAAM;IAC7B,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC;QAAE,OAAM;IAE9C,MAAM,cAAc,GAAG,aAAa,CAAC,QAAQ,CAC3C,MAAM,EACN;QACE,IAAI,EAAE,OAAO;QACb,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,cAAc,CAAC,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC;KACjD,CACF,CAAA;IACD,IAAI,CAAC,cAAc;QAAE,OAAM;IAC3B,MAAM,CAAC,EAAE,aAAa,CAAC,GAAG,cAAc,CAAA;IAExC,MAAM,kBAAkB,GAAG,GAAwB,EAAE;QACnD,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,aAAa,EAAE,CAAC,CAAA;QAClE,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,aAAa,EAAE,CAAC,CAAA;QAE7D,MAAM,MAAM,GAAG,cAAc,CAAC,KAAK,CAAC,MAAM,EAAE;YAC1C,cAAc;YACd,gBAAgB;SACjB,CAAC,CAAA;QAEF,IAAI,WAAW,EAAE;YACf,MAAM,OAAO,GAAG,WAAW,CAAC,CAAC,CAAC,CAAA;YAC9B,IAAI,MAAM,CAAC,OAAO,CAAC;gBAAE,OAAO,OAAO,CAAC,IAA2B,CAAA;SAChE;QAED,IAAI,UAAU,EAAE;YACd,MAAM,OAAO,GAAG,UAAU,CAAC,CAAC,CAAC,CAAA;YAC7B,IAAI,MAAM,CAAC,OAAO,CAAC;gBAAE,OAAO,OAAO,CAAC,IAA2B,CAAA;SAChE;QAED,OAAO,gBAAgB,CAAA;IACzB,CAAC,CAAA;IAED,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,qBAAqB,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,aAAa,EAAE,CAAC,CAAA;IAE9E,MAAM,IAAI,GAAG,kBAAkB,EAAE,CAAA;IACjC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,iBAAiB,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE;QACxD,EAAE,EAAE,aAAa;KAClB,CAAC,CAAA;IAEF,aAAa,CAAC,MAAM,CAAC,CAAA;AACvB,CAAC","sourcesContent":["import { mergeSiblings } from './merge-siblings'\nimport { Editor, Range, Transforms } from 'slate'\nimport {\n  createListElement,\n  createListItemElement,\n  GlobalQueries,\n} from '@cardbox-editor/core'\nimport type { ListElement } from '../elements/types'\nimport type { ElementByType } from \"../../../shared/types\";\nimport { GlobalMatchers } from \"../../../lib/global-matchers\";\n\nexport function indentParagraph(editor: Editor) {\n  if (!editor.selection) return\n  if (Range.isExpanded(editor.selection)) return\n\n  const paragraphEntry = GlobalQueries.getAbove<ElementByType<'paragraph'>>(\n    editor,\n    {\n      type: 'block',\n      mode: 'lowest',\n      match: GlobalMatchers.block(editor, 'paragraph'),\n    }\n  )\n  if (!paragraphEntry) return\n  const [, paragraphPath] = paragraphEntry\n\n  const getNearestListType = (): ListElement['type'] => {\n    const beforeEntry = Editor.previous(editor, { at: paragraphPath })\n    const afterEntry = Editor.next(editor, { at: paragraphPath })\n\n    const isList = GlobalMatchers.block(editor, [\n      'ordered-list',\n      'unordered-list',\n    ])\n\n    if (beforeEntry) {\n      const element = beforeEntry[0]\n      if (isList(element)) return element.type as ListElement['type']\n    }\n\n    if (afterEntry) {\n      const element = afterEntry[0]\n      if (isList(element)) return element.type as ListElement['type']\n    }\n\n    return 'unordered-list'\n  }\n\n  Transforms.wrapNodes(editor, createListItemElement([]), { at: paragraphPath })\n\n  const type = getNearestListType()\n  Transforms.wrapNodes(editor, createListElement(type, []), {\n    at: paragraphPath,\n  })\n\n  mergeSiblings(editor)\n}\n"]}