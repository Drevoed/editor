{"version":3,"file":"block.js","sourceRoot":"","sources":["block.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAQ,MAAM,OAAO,CAAA;AAEpC,MAAM,UAAU,KAAK,CAAwB,MAAc,EAAE,IAAc;IACzE,OAAO,CAAC,IAAU,EAA4B,EAAE;QAC9C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;YAAE,OAAO,KAAK,CAAA;QAC/C,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAA;QACtB,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;QACjD,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAS,CAAC,CAAA;IACvC,CAAC,CAAA;AACH,CAAC","sourcesContent":["import type { ElementByType, ElementType } from '../../shared/types'\nimport { Editor, Node } from 'slate'\n\nexport function block<T extends ElementType>(editor: Editor, type?: T | T[]) {\n  return (node: Node): node is ElementByType<T> => {\n    if (!Editor.isBlock(editor, node)) return false\n    if (!type) return true\n    const array = Array.isArray(type) ? type : [type]\n    return array.includes(node.type as T)\n  }\n}\n"]}