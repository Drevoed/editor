{"version":3,"file":"move-children.js","sourceRoot":"","sources":["move-children.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,8BAA8B,CAAA;AAC7D,OAAO,EAAE,MAAM,EAAuB,UAAU,EAAE,MAAM,OAAO,CAAA;AAI/D,MAAM,UAAU,YAAY,CAC1B,MAAc,EACd,EACE,MAAM,EACN,KAAK,GAAG,GAAG,EAAE,CAAC,IAAI,EAClB,EAAE,EAAE,WAAW,EACf,SAAS,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,EAC5B,gBAAgB,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,KAAK,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAUpE;IAED,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,WAAW,CAAC,CAAA;IAE1D,MAAM,WAAW,GAAG,IAAI,GAAG,EAA4B,CAAA;IAEvD,KAAK,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE;QAC1D,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;KAC7B;IAGD,MAAM,QAAQ,GAAa,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAA;IAE/C,oBAAoB;IACpB,MAAM,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IAC1C,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;IAE/D,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;QAC1B,MAAM,OAAO,GAAG,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;QAE5C,IAAI,kBAAkB,EAAE;YACtB,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,CAAA;SACpD;aAAM;YACL,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE;gBAC7B,EAAE,EAAE,MAAM,CAAC,IAAI;gBACf,KAAK,CAAC,IAAI;oBACR,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;wBAAE,OAAO,KAAK,CAAA;oBAChC,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;oBACnC,IAAI,OAAO,KAAK,KAAK,QAAQ;wBAAE,OAAO,KAAK,CAAA;oBAC3C,OAAO,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;gBAC3B,CAAC;aACF,CAAC,CAAA;SACH;QAED,IAAI,CAAC,cAAc,CAAC,OAAO;YAAE,OAAM;QAEnC,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,WAAW,CAAC,EAAE;YACrD,EAAE,EAAE,cAAc,CAAC,OAAO;SAC3B,CAAC,CAAA;KACH;AACH,CAAC","sourcesContent":["import { GlobalMatchers } from '../../../lib/global-matchers'\nimport { Editor, Element, Node, Path, Transforms } from 'slate'\n\ntype ChildOf<T extends Element> = T['children'][number]\n\nexport function moveChildren<TParent extends Element>(\n  editor: Editor,\n  {\n    parent,\n    match = () => true,\n    to: destination,\n    transform = (items) => items,\n    willRemoveParent = (moved) => moved === parent.node.children.length,\n  }: {\n    parent: {\n      node: TParent\n      path: Path\n    }\n    match?: (node: ChildOf<TParent>, index: number) => boolean\n    to: Path\n    transform?: (items: ChildOf<TParent>[]) => Node | Node[]\n    willRemoveParent?: (moved: number) => boolean\n  }\n) {\n  const destinationRef = Editor.pathRef(editor, destination)\n\n  const indexByItem = new Map<ChildOf<TParent>, number>()\n\n  for (const [index, item] of parent.node.children.entries()) {\n    indexByItem.set(item, index)\n  }\n\n  type Children = typeof parent.node.children[number][]\n  const children: Children = parent.node.children\n\n  // take bottom items\n  const itemsToMove = children.filter(match)\n  const shouldRemoveParent = willRemoveParent(itemsToMove.length)\n\n  if (itemsToMove.length > 0) {\n    const isBlock = GlobalMatchers.block(editor)\n\n    if (shouldRemoveParent) {\n      Transforms.removeNodes(editor, { at: parent.path })\n    } else {\n      Transforms.removeNodes(editor, {\n        at: parent.path,\n        match(node) {\n          if (!isBlock(node)) return false\n          const index = indexByItem.get(node)\n          if (typeof index !== 'number') return false\n          return match(node, index)\n        },\n      })\n    }\n\n    if (!destinationRef.current) return\n\n    Transforms.insertNodes(editor, transform(itemsToMove), {\n      at: destinationRef.current,\n    })\n  }\n}\n"]}