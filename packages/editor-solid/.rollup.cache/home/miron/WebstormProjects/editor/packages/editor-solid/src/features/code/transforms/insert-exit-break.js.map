{"version":3,"file":"insert-exit-break.js","sourceRoot":"","sources":["insert-exit-break.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,OAAO,CAAA;AACvD,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAA;AAEpE,MAAM,WAAW,GAAG,CAAC,CAAA;AAMrB,MAAM,UAAU,eAAe,CAAC,MAAc;IAC5C,MAAM,OAAO,GAAoB,EAAE,OAAO,EAAE,IAAI,EAAE,CAAA;IAClD,MAAM,OAAO,GAAoB,EAAE,OAAO,EAAE,KAAK,EAAE,CAAA;IAEnD,IAAI,CAAC,MAAM,CAAC,SAAS;QAAE,OAAO,OAAO,CAAA;IAErC,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;QACtC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;KAC1B;IAED,MAAM,IAAI,GAAG,aAAa,CAAC,QAAQ,CAAC,MAAM,EAAE;QAC1C,IAAI,EAAE,OAAO;QACb,KAAK,EAAE,cAAc,CAAC,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC;KACjD,CAAC,CAAA;IAEF,IAAI,CAAC,IAAI;QAAE,OAAO,OAAO,CAAA;IACzB,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,IAAI,CAAA;IAEjC,IAAI,MAAM,GAAG,CAAC,CAAA;IACd,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;IAC5C,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;QACvB,IAAI,IAAI,KAAK,GAAG;YAAE,MAAK;QACvB,MAAM,IAAI,CAAC,CAAA;KACZ;IAED,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,CAAA;IACpD,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;IAC3C,IAAI,YAAY,KAAK,GAAG;QAAE,MAAM,IAAI,WAAW,CAAA;IAC/C,IAAI,YAAY,KAAK,GAAG;QAAE,MAAM,IAAI,WAAW,CAAA;IAC/C,IAAI,YAAY,KAAK,GAAG;QAAE,MAAM,IAAI,WAAW,CAAA;IAC/C,IAAI,YAAY,KAAK,GAAG;QAAE,MAAM,IAAI,WAAW,CAAA;IAE/C,UAAU,CAAC,UAAU,CAAC,MAAM,EAAE;QAC5B,KAAK,EAAE,cAAc,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC;QAC9C,MAAM,EAAE,IAAI;KACb,CAAC,CAAA;IAEF,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAA;IAC9C,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAA;IAE9C,IAAI,MAAM,GAAG,CAAC,EAAE;QACd,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAA;QAC3D,UAAU,CAAC,UAAU,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;YAChD,EAAE,EAAE,SAAS;SACd,CAAC,CAAA;KACH;IAED,OAAO,OAAO,CAAA;AAChB,CAAC","sourcesContent":["import { Editor, Path, Range, Transforms } from 'slate'\nimport { GlobalMatchers, GlobalQueries } from '@cardbox-editor/core'\n\nconst INDENT_SIZE = 2\n\ninterface TransformResult {\n  handled: boolean\n}\n\nexport function insertExitBreak(editor: Editor): TransformResult {\n  const handled: TransformResult = { handled: true }\n  const skipped: TransformResult = { handled: false }\n\n  if (!editor.selection) return handled\n\n  if (Range.isExpanded(editor.selection)) {\n    Transforms.delete(editor)\n  }\n\n  const line = GlobalQueries.getAbove(editor, {\n    type: 'block',\n    match: GlobalMatchers.block(editor, 'code-line'),\n  })\n\n  if (!line) return skipped\n  const [lineNode, linePath] = line\n\n  let offset = 0\n  const text = Editor.string(editor, linePath)\n  for (const char of text) {\n    if (char !== ' ') break\n    offset += 1\n  }\n\n  const start = Editor.start(editor, editor.selection)\n  const previousChar = text[start.offset - 1]\n  if (previousChar === '{') offset += INDENT_SIZE\n  if (previousChar === '(') offset += INDENT_SIZE\n  if (previousChar === '<') offset += INDENT_SIZE\n  if (previousChar === ':') offset += INDENT_SIZE\n\n  Transforms.splitNodes(editor, {\n    match: GlobalMatchers.equals(editor, lineNode),\n    always: true,\n  })\n\n  Transforms.select(editor, Path.next(linePath))\n  Transforms.collapse(editor, { edge: 'start' })\n\n  if (offset > 0) {\n    const lineStart = Editor.start(editor, Path.next(linePath))\n    Transforms.insertText(editor, ' '.repeat(offset), {\n      at: lineStart,\n    })\n  }\n\n  return handled\n}\n"]}