{"version":3,"file":"menu-wrapper.jsx","sourceRoot":"","sources":["menu-wrapper.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAA;AACjD,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAA;AAE9C,OAAO,KAAK,MAAM,gBAAgB,CAAA;AAClC,OAAO,IAAI,MAAM,MAAM,CAAA;AACvB,OAAc,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAUvC,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC;AAC1B,gEAAgE;AAChE,GAAG,EAAE,GAAG,EACR,aAAa;AACb,gEAAgE;AAChE,OAAO,EAAE,OAAO,EAChB,QAAQ,GACwB,EAAE,EAAE;IACpC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,gBAAgB,EAAE,CAAA;IAEhD,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAA;IAEzC,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAChC,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IACjC,MAAM,MAAM,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,CAAA;IAEnD,MAAM,aAAa,GAAG,IAAI,CAAC;QACzB,iBAAiB,EAAE,IAAI;QACvB,CAAC,aAAa,CAAC,EAAE,IAAI;QACrB,QAAQ,EAAE,MAAM;KACjB,CAAC,CAAA;IAEF,OAAO,CACL,CAAC,KAAK,CACJ,KAAK,CAAC,CAAC,YAAY,CAAC,eAAe,CAAC,CACpC,WAAW,CAAC,CAAC,IAAI,CAAC,CAClB,SAAS,CAAC,YAAY,CACtB,OAAO,CAAC,CACN,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAC7B;UAAA,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EACtD;QAAA,EAAE,cAAc,CAAC,CAClB,CACD,OAAO,CAAC,CAAC,MAAM,CAAC,CAChB,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAC9B,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CACjC,cAAc,CAAC,CAAC,IAAI,CAAC,CAErB;MAAA,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAC7C;QAAA,CAAC,GAAG,CAAC,AAAD,EACN;MAAA,EAAE,GAAG,CACP;IAAA,EAAE,KAAK,CAAC,CACT,CAAA;AACH,CAAC,CAAA;AAED,MAAM,cAAc,GAAG,CAAC,EACtB,MAAM,EACN,QAAQ,GAIT,EAAE,EAAE;IACH,IAAI,CAAC,MAAM;QAAE,OAAO,IAAI,CAAA;IACxB,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA","sourcesContent":["import { TIPPY_THEMES } from '../../../lib/tippy'\nimport { useControlsState } from '../controls'\nimport type { ContentProps, MenuAdditionalProps } from './types'\nimport Tippy from '@tippyjs/react'\nimport clsx from 'clsx'\nimport React, { useState } from 'react'\n\ntype SvgComponent = (props: React.SVGProps<SVGSVGElement>) => JSX.Element\n\ninterface MenuProps {\n  svg: SvgComponent\n  iconClassName: string\n  content: (props: ContentProps) => JSX.Element\n}\n\nexport const MenuWrapper = ({\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  svg: Svg,\n  iconClassName,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  content: Content,\n  sections,\n}: MenuProps & MenuAdditionalProps) => {\n  const { active, setActive } = useControlsState()\n\n  const [isOpen, setOpen] = useState(false)\n\n  const show = () => setOpen(true)\n  const hide = () => setOpen(false)\n  const toggle = () => setOpen((current) => !current)\n\n  const fullIconClass = clsx({\n    'block-menu-icon': true,\n    [iconClassName]: true,\n    'active': isOpen,\n  })\n\n  return (\n    <Tippy\n      theme={TIPPY_THEMES.BLOCK_TYPE_MENU}\n      interactive={true}\n      placement=\"bottom-end\"\n      content={\n        <ContentWrapper active={active}>\n          <Content show={show} hide={hide} sections={sections} />\n        </ContentWrapper>\n      }\n      visible={isOpen}\n      onShow={() => setActive(true)}\n      onHidden={() => setActive(false)}\n      onClickOutside={hide}\n    >\n      <div className={fullIconClass} onClick={toggle}>\n        <Svg />\n      </div>\n    </Tippy>\n  )\n}\n\nconst ContentWrapper = ({\n  active,\n  children,\n}: {\n  active: boolean\n  children: JSX.Element\n}) => {\n  if (!active) return null\n  return children\n}\n"]}