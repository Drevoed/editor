{"version":3,"file":"outdent.js","sourceRoot":"","sources":["outdent.ts"],"names":[],"mappings":"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","sourcesContent":["import { GlobalMatchers } from '../../../lib/global-matchers'\nimport { LocalQueries } from '../queries'\nimport { FullInfo } from '../queries/info'\nimport { mergeSiblings } from './merge-siblings'\nimport { moveChildren } from './move-children'\nimport { Editor, Location, Node, Path, Range, Transforms } from 'slate'\n\ninterface Options {\n  at?: Location\n}\n\nexport function outdent(editor: Editor, options: Options = {}) {\n  const { at = editor.selection } = options\n  if (!at) return\n\n  if (Range.isRange(at) && Range.isExpanded(at)) return\n\n  const info = LocalQueries.info(editor, { at })\n  if (!info) return\n\n  if (!info.lists.above || !info.items.above) {\n    return outdentFirstLevel(editor, options, info)\n  }\n\n  function isWrapperAbove(node: Node) {\n    if (!info) return false\n    const isCurrentList = node === info.lists.current.node\n    const isItemAbove = node === info.items.above?.node\n    return isCurrentList || isItemAbove\n  }\n\n  if (info.lists.current.node.children.length === 1) {\n    Transforms.unwrapNodes(editor, {\n      at: info.items.current.path,\n      mode: 'all',\n      split: true,\n      match: isWrapperAbove,\n    })\n\n    return\n  }\n\n  moveChildren(editor, {\n    parent: info.lists.current,\n    match: (_, index) => index > info.items.current.meta.index,\n    to: info.items.current.path.concat(info.items.current.node.children.length),\n    transform(nodes) {\n      return {\n        type: info.lists.current.node.type,\n        children: nodes,\n      }\n    },\n  })\n\n  mergeSiblings(editor, { at: info.items.current.path })\n\n  if (info.items.current.meta.isFirst) {\n    const newInfo = LocalQueries.info(editor, { at })\n    if (!newInfo) return\n    if (!newInfo.items.above) return\n\n    Transforms.unwrapNodes(editor, {\n      at: newInfo.items.current.path,\n      mode: 'all',\n      split: true,\n      match: GlobalMatchers.equals(editor, [\n        newInfo.lists.current.node,\n        newInfo.items.above.node,\n      ]),\n    })\n  } else {\n    Transforms.moveNodes(editor, {\n      at: info.items.current.path,\n      to: Path.next(info.items.above.path),\n    })\n  }\n\n  mergeSiblings(editor, { at: info.lists.above.path })\n}\n\nfunction outdentFirstLevel(\n  editor: Editor,\n  options: Options = {},\n  info: FullInfo\n) {\n  const { at = editor.selection } = options\n  if (!at) return\n\n  Transforms.unwrapNodes(editor, {\n    at: info.items.current.path,\n    mode: 'all',\n    split: true,\n    match: GlobalMatchers.equals(editor, [\n      info.lists.current.node,\n      info.items.current.node,\n    ]),\n  })\n\n  mergeSiblings(editor)\n\n  // const isSimple = info.items.current.meta.isSimple\n  // const hasListInside = info.blocks.second?.meta.isList\n\n  // const pathRefs = {\n  //   items: {\n  //     current: Editor.pathRef(editor-react, info.items.current.path),\n  //   },\n  // }\n\n  // if (!info.items.current.meta.isFirst)\n  //   Transforms.splitNodes(editor-react, {\n  //     at: info.items.current.path,\n  //     match: GlobalMatchers.equals(editor-react, info.lists.current.node),\n  //   })\n\n  // if (isSimple && hasListInside) {\n  //   if (!info.blocks.second) return\n\n  //   moveChildren(editor-react, {\n  //     parent: info.blocks.second,\n  //     to:\n  //   })\n  // }\n}\n"]}