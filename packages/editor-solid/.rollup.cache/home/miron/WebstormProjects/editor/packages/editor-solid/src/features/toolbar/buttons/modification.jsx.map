{"version":3,"file":"modification.jsx","sourceRoot":"","sources":["modification.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAA;AACpD,OAAO,EAAE,KAAK,EAAE,MAAM,2BAA2B,CAAA;AACjD,OAAO,EAAU,UAAU,EAAE,MAAM,sBAAsB,CAAA;AACzD,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAA;AACxC,OAAmE,OAAO,CAAA;AAC1E,OAAO,EAAE,MAAM,EAAQ,MAAM,OAAO,CAAA;AACpC,OAAO,EAAE,eAAe,EAAE,MAAM,6BAA6B,CAAC;AAI9D,SAAS,OAAO,CAAC,MAAc,EAAE,IAAU;IACzC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;IAClC,IAAI,CAAC,KAAK;QAAE,OAAO,KAAK,CAAA;IACxB,OAAO,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA;AAC7B,CAAC;AAUD,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,EAChC,IAAI,EACJ,IAAI,EACJ,MAAM,EACN,OAAO,EACP,KAAK,GAAG,EAAE,GACJ,EAAE,EAAE;IACV,MAAM,MAAM,GAAG,SAAS,EAAE,CAAA;IAC1B,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;IACtC,MAAM,EAAE,GAAG,KAAK,EAAE,CAAA;IAElB,MAAM,WAAW,GAAsB,CAAC,KAAK,EAAE,EAAE;QAC/C,KAAK,CAAC,cAAc,EAAE,CAAA;QAEtB,eAAe,CAAC,OAAO,CAAC,MAAM,EAAE;YAC9B,MAAM;YACN,KAAK,EAAE,UAAU,CAAC,QAAQ,EAAE;YAC5B,EAAE;SACH,CAAC,CAAA;IACJ,CAAC,CAAA;IAED,OAAO,CACL,CAAC,aAAa,CACZ,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,OAAO,CAAC,CAAC,WAAW,CAAC,CACrB,KAAK,CAAC,CAAC,KAAK,CAAC,EACb,CACH,CAAA;AACH,CAAC,CAAA","sourcesContent":["import { useEditor } from '../../../lib/hooks/slate'\nimport { useUI } from '../../../lib/hooks/use-ui'\nimport { Action, NoopEvents } from '@cardbox-editor/core'\nimport { ToolbarButton } from './common'\nimport React, { CSSProperties, MouseEventHandler, ReactNode } from 'react'\nimport { Editor, Text } from 'slate'\nimport { ActionsRegistry } from \"../../../registries/actions\";\n\ntype Mark = keyof Omit<Text, 'text'>\n\nfunction hasMark(editor: Editor, mark: Mark) {\n  const marks = Editor.marks(editor)\n  if (!marks) return false\n  return Boolean(marks[mark])\n}\n\ninterface Props {\n  mark: Mark\n  icon: ReactNode\n  action: Action\n  tooltip?: string\n  style?: CSSProperties\n}\n\nexport const ToolbarMarkButton = ({\n  mark,\n  icon,\n  action,\n  tooltip,\n  style = {},\n}: Props) => {\n  const editor = useEditor()\n  const isActive = hasMark(editor, mark)\n  const ui = useUI()\n\n  const handleClick: MouseEventHandler = (event) => {\n    event.preventDefault()\n\n    ActionsRegistry.execute(action, {\n      editor,\n      event: NoopEvents.keyboard(),\n      ui,\n    })\n  }\n\n  return (\n    <ToolbarButton\n      icon={icon}\n      isActive={isActive}\n      tooltip={tooltip}\n      onClick={handleClick}\n      style={style}\n    />\n  )\n}\n"]}