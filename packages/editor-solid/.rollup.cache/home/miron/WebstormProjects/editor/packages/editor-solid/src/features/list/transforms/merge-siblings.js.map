{"version":3,"file":"merge-siblings.js","sourceRoot":"","sources":["merge-siblings.ts"],"names":[],"mappings":"AAAA,OAA4B,uBAAuB,CAAA;AACnD,OAA4B,mBAAmB,CAAA;AAC/C,OAAO,EAAE,MAAM,EAAa,IAAI,EAAE,UAAU,EAAE,MAAM,OAAO,CAAA;AAM3D,SAAS,mBAAmB,CAC1B,MAAc,EACd,IAAiB,EACjB,UAAmB,EAAE;IAErB,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,OAAO,CAAA;IAE3B,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAc,MAAM,EAAE;QACjD,EAAE;QACF,KAAK,EAAE,CAAC,OAAO,EAAE,EAAE;YACjB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC;gBAAE,OAAO,KAAK,CAAA;YAClD,OAAO,OAAO,CAAC,IAAI,KAAK,IAAI,CAAA;QAC9B,CAAC;QACD;;WAEG;QACH,OAAO,EAAE,IAAI;KACd,CAAC,CAAA;IAEF,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;QAChC,oDAAoD;SACnD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;IAE5C,IAAI,OAAO,GAAkC,IAAI,CAAA;IAEjD,MAAM,aAAa,GAAG,CAAC,IAAU,EAAE,IAAU,EAAE,EAAE;QAC/C,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACrC,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAA;IACzC,CAAC,CAAA;IAED,KAAK,MAAM,QAAQ,IAAI,KAAK,EAAE;QAC5B,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,QAAQ,CAAA;YAClB,SAAQ;SACT;QAED,MAAM,CAAC,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAA;QACjC,MAAM,CAAC,EAAE,WAAW,CAAC,GAAG,OAAO,CAAA;QAC/B,OAAO,GAAG,QAAQ,CAAA;QAElB,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,WAAW,CAAC,EAAE;YAC7C,SAAQ;SACT;QAED,UAAU,CAAC,UAAU,CAAC,MAAM,EAAE;YAC5B,EAAE,EAAE,WAAW;SAChB,CAAC,CAAA;KACH;AACH,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,MAAc,EAAE,UAAmB,EAAE;IACjE,mBAAmB,CAAC,MAAM,EAAE,cAAc,EAAE,OAAO,CAAC,CAAA;IACpD,mBAAmB,CAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAA;AACxD,CAAC","sourcesContent":["import { ElementType } from '../../../shared/types'\nimport { ListElement } from '../elements/types'\nimport { Editor, NodeEntry, Path, Transforms } from 'slate'\n\ninterface Options {\n  at?: Path\n}\n\nfunction mergeSiblingsByType(\n  editor: Editor,\n  type: ElementType,\n  options: Options = {}\n) {\n  const { at = [] } = options\n\n  const iterator = Editor.nodes<ListElement>(editor, {\n    at,\n    match: (element) => {\n      if (!Editor.isBlock(editor, element)) return false\n      return element.type === type\n    },\n    /*\n     * Merging in natural order can lead to wrong indexes usage\n     */\n    reverse: true,\n  })\n\n  const nodes = Array.from(iterator)\n    // we need the same levels to be close to each other\n    .sort((a, b) => a[1].length - b[1].length)\n\n  let current: NodeEntry<ListElement> | null = null\n\n  const isNextSibling = (prev: Path, next: Path) => {\n    const nextAfterPrev = Path.next(prev)\n    return Path.equals(nextAfterPrev, next)\n  }\n\n  for (const previous of nodes) {\n    if (!current) {\n      current = previous\n      continue\n    }\n\n    const [, previousPath] = previous\n    const [, currentPath] = current\n    current = previous\n\n    if (!isNextSibling(previousPath, currentPath)) {\n      continue\n    }\n\n    Transforms.mergeNodes(editor, {\n      at: currentPath,\n    })\n  }\n}\n\nexport function mergeSiblings(editor: Editor, options: Options = {}) {\n  mergeSiblingsByType(editor, 'ordered-list', options)\n  mergeSiblingsByType(editor, 'unordered-list', options)\n}\n"]}