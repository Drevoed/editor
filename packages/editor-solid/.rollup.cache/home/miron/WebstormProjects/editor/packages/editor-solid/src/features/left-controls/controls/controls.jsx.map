{"version":3,"file":"controls.jsx","sourceRoot":"","sources":["controls.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAA;AACpD,OAAO,EAAE,gBAAgB,EAAE,MAAM,WAAW,CAAA;AAC5C,OAAyC,SAAS,CAAA;AAClD,OAAO,IAAI,MAAM,MAAM,CAAA;AACvB,OAAc,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AACvC,OAAO,EAAE,MAAM,EAAW,KAAK,EAAE,MAAM,OAAO,CAAA;AAC9C,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,aAAa,CAAA;AAOtD,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,EAAE,OAAO,EAAE,MAAM,EAAiB,EAAE,EAAE;IAC7D,MAAM,QAAQ,GAAG,WAAW,EAAE,CAAA;IAE9B,IAAI,QAAQ;QAAE,OAAO,IAAI,CAAA;IAEzB,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,EAAG,CAAA;AAC5D,CAAC,CAAA;AAED,MAAM,aAAa,GAAG,CAAC,EAAE,OAAO,EAAE,MAAM,EAAiB,EAAE,EAAE;IAC3D,MAAM,MAAM,GAAG,SAAS,EAAE,CAAA;IAE1B,MAAM,oBAAoB,GAAG,WAAW,EAAE,CAAA;IAC1C,MAAM,gBAAgB,GACpB,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA;IACzD,MAAM,aAAa,GAAG,oBAAoB,IAAI,gBAAgB,CAAA;IAC9D,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAA;IAE3C,MAAM,IAAI,GAAc;QACtB,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC;KACvC,CAAA;IAED,MAAM,aAAa,GAAkB;QACnC,OAAO;QACP,IAAI;QACJ,MAAM;QACN,SAAS;KACV,CAAA;IAED,MAAM,OAAO,GAAG,MAAM,IAAI,aAAa,CAAA;IAEvC,MAAM,SAAS,GAAG,IAAI,CAAC;QACrB,QAAQ,EAAE,IAAI;QACd,OAAO;KACR,CAAC,CAAA;IAEF,OAAO,CACL,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,CACrC;MAAA,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,CAChD;QAAA,CAAC,MAAM,EAAE,CACX;MAAA,EAAE,GAAG,CACP;IAAA,EAAE,gBAAgB,CAAC,CACpB,CAAA;AACH,CAAC,CAAA","sourcesContent":["import { useEditor } from '../../../lib/hooks/slate'\nimport { ControlsProvider } from './context'\nimport { BlockMeta, ControlsState } from './types'\nimport clsx from 'clsx'\nimport React, { useState } from 'react'\nimport { Editor, Element, Range } from 'slate'\nimport { useReadOnly, useSelected } from 'slate-react'\n\ninterface ControlsProps {\n  element: Element\n  render: () => JSX.Element | JSX.Element[]\n}\n\nexport const Controls = ({ element, render }: ControlsProps) => {\n  const readOnly = useReadOnly()\n\n  if (readOnly) return null\n\n  return <ControlsInner element={element} render={render} />\n}\n\nconst ControlsInner = ({ element, render }: ControlsProps) => {\n  const editor = useEditor()\n\n  const isSelectionInElement = useSelected()\n  const isSelectionEmpty =\n    editor.selection && Range.isCollapsed(editor.selection)\n  const isSelectionOk = isSelectionInElement && isSelectionEmpty\n  const [active, setActive] = useState(false)\n\n  const meta: BlockMeta = {\n    empty: Editor.isEmpty(editor, element),\n  }\n\n  const controlsState: ControlsState = {\n    element,\n    meta,\n    active,\n    setActive,\n  }\n\n  const visible = active || isSelectionOk\n\n  const className = clsx({\n    controls: true,\n    visible,\n  })\n\n  return (\n    <ControlsProvider value={controlsState}>\n      <div className={className} contentEditable={false}>\n        {render()}\n      </div>\n    </ControlsProvider>\n  )\n}\n"]}