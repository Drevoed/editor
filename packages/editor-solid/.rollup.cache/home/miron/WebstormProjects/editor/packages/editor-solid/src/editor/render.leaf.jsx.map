{"version":3,"file":"render.leaf.jsx","sourceRoot":"","sources":["render.leaf.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAoB,aAAa,EAAE,MAAM,sBAAsB,CAAA;AACtE,OAAO,KAAkC,MAAM,OAAO,CAAA;AAKtD,MAAM,cAAc,GAAkB;IACpC,IAAI,EAAE,GAAG;IACT,MAAM,EAAE,IAAI;IACZ,UAAU,EAAE,GAAG;IACf,UAAU,EAAE,MAAM;CACnB,CAAA;AAED,8DAA8D;AAC9D,SAAS,eAAe,CAAC,QAAa;IACpC,MAAM,KAAK,GAAG,QAAQ,EAAE,KAAK,CAAA;IAC7B,OAAO,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,KAAK,EAAE,MAAM,EAAE,IAAI,KAAK,WAAW,CAAA;AAC7E,CAAC;AAED,SAAS,YAAY,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAmB;IACnE,wCAAwC;IACxC,IAAI,eAAe,CAAC,QAAQ,CAAC;QAC3B,OAAO,CACL,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAC1B;QAAA,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CACnD;UAAA,CAAC,QAAQ,CACX;QAAA,EAAE,IAAI,CACR;MAAA,EAAE,IAAI,CAAC,CACR,CAAA;IAEH,IAAI,IAAI,CAAC,UAAU;QACjB,OAAO,CACL,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,SAAS,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,IAAI,UAAU,CAAC,CAC1D;QAAA,CAAC,QAAQ,CACX;MAAA,EAAE,IAAI,CAAC,CACR,CAAA;IAEH,MAAM,aAAa,GAAG,aAAa,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;IAE3D,IAAI,OAAO,GAAiB,QAAQ,CAAA;IAEpC,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;QACxC,MAAM,WAAW,GAAG,cAAc,CAAC,YAAY,CAAC,CAAA;QAChD,OAAO,GAAG,KAAK,CAAC,aAAa,CAAC,WAAW,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;KAC1D;IAED,IAAI,IAAI,CAAC,IAAI,EAAE;QACb,OAAO,GAAG,CACR,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CACjC;QAAA,CAAC,OAAO,CACV;MAAA,EAAE,CAAC,CAAC,CACL,CAAA;KACF;IAED,IAAI,OAAO,KAAK,QAAQ,EAAE;QACxB,cAAc;QACd,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,CAAA;KACjC;IAED,OAAO,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,UAAU,CAAC,CAAA;AAChD,CAAC;AAED,MAAM,aAAa,GAAG,CAAC,KAAsB,EAAE,EAAE;IAC/C,OAAO,YAAY,CAAC,KAAK,CAAC,CAAA;AAC5B,CAAC,CAAA;AAED,MAAM,UAAU,UAAU,CAAC,EAAE,QAAQ,EAAE,GAAG,IAAI,EAAmB;IAC/D,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,aAAa,CAAC,CAAA;AAC5D,CAAC","sourcesContent":["import { TextModification, GlobalQueries } from '@cardbox-editor/core'\nimport React, { ReactElement, ReactHTML } from 'react'\nimport type { RenderLeafProps } from 'slate-react'\n\ntype ElementMapper = Record<TextModification, keyof ReactHTML>\n\nconst ELEMENT_MAPPER: ElementMapper = {\n  bold: 'b',\n  italic: 'em',\n  underlined: 'u',\n  inlineCode: 'code',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isCodeEmptyLine(children: any): boolean {\n  const props = children?.props\n  return props?.text.text.length === 0 && props?.parent?.type === 'code-line'\n}\n\nfunction buildElement({ leaf, children, attributes }: RenderLeafProps) {\n  // fix double empty line copying problem\n  if (isCodeEmptyLine(children))\n    return (\n      <span data-slate-leaf=\"true\">\n        <span data-slate-zero-width=\"z\" data-slate-length={0}>\n          {'\\uFEFF'}\n        </span>\n      </span>\n    )\n\n  if (leaf.prismToken)\n    return (\n      <span className={`token ${leaf.prismToken}`} {...attributes}>\n        {children}\n      </span>\n    )\n\n  const modifications = GlobalQueries.textModifications(leaf)\n\n  let wrapped: ReactElement = children\n\n  for (const modification of modifications) {\n    const elementType = ELEMENT_MAPPER[modification]\n    wrapped = React.createElement(elementType, null, wrapped)\n  }\n\n  if (leaf.href) {\n    wrapped = (\n      <a href={leaf.href} target=\"_blank\">\n        {wrapped}\n      </a>\n    )\n  }\n\n  if (wrapped === children) {\n    // simple text\n    wrapped = <span>{wrapped}</span>\n  }\n\n  return React.cloneElement(wrapped, attributes)\n}\n\nconst LeafComponent = (props: RenderLeafProps) => {\n  return buildElement(props)\n}\n\nexport function renderLeaf({ children, ...rest }: RenderLeafProps) {\n  return <LeafComponent {...rest}>{children}</LeafComponent>\n}\n"]}