{"version":3,"file":"builder.js","sourceRoot":"","sources":["builder.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAA;AAC/B,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAA;AACpC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAA;AACjC,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAA;AAGxC,MAAM,OAAO,OAAO;IAClB,MAAM,CAAQ;IAEd,YAAY,MAAc;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;IACtB,CAAC;IAED,MAAM,GAAmC,EAAE,CAAA;IAE3C,KAAK,CAAC,IAAkC;QACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAA;QAC1C,OAAO,IAAI,CAAA;IACb,CAAC;IAED,SAAS,CAAC,IAAU;QAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAA;QAC9C,OAAO,IAAI,CAAA;IACb,CAAC;IAED,MAAM,CAAC,IAAmB;QACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAA;QAC3C,OAAO,IAAI,CAAA;IACb,CAAC;IAED,OAAO,CAAC,OAAgB;QACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAA;QAC/C,OAAO,IAAI,CAAA;IACb,CAAC;IAED,OAAO;QACL,OAAO,CAAC,IAAU,EAAW,EAAE;YAC7B,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA;QAClD,CAAC,CAAA;IACH,CAAC;CACF;AAED,MAAM,CAAC,MAAM,OAAO,GAAG,CAAC,MAAc,EAAE,EAAE,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,CAAA","sourcesContent":["import type { ElementType } from '../../shared/types'\nimport { block } from './block'\nimport { childOf } from './child-of'\nimport { equals } from './equals'\nimport { notEquals } from './not-equals'\nimport type { Editor, Element, Node } from 'slate'\n\nexport class Builder {\n  editor: Editor\n\n  constructor(editor: Editor) {\n    this.editor = editor\n  }\n\n  stages: Array<(node: Node) => boolean> = []\n\n  block(type?: ElementType | ElementType[]) {\n    this.stages.push(block(this.editor, type))\n    return this\n  }\n\n  notEquals(node: Node) {\n    this.stages.push(notEquals(this.editor, node))\n    return this\n  }\n\n  equals(node: Node | Node[]) {\n    this.stages.push(equals(this.editor, node))\n    return this\n  }\n\n  childOf(element: Element) {\n    this.stages.push(childOf(this.editor, element))\n    return this\n  }\n\n  compile() {\n    return (node: Node): boolean => {\n      return this.stages.every((stage) => stage(node))\n    }\n  }\n}\n\nexport const builder = (editor: Editor) => new Builder(editor)\n"]}