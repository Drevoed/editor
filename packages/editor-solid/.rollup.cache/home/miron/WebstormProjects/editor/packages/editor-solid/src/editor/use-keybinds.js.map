{"version":3,"file":"use-keybinds.js","sourceRoot":"","sources":["use-keybinds.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAA;AAC9C,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAA;AAC3C,OAAc,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,OAAO,CAAA;AAOrD,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAA;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAA;AAIjD,MAAM,eAAe,GAAgB;IACnC,iBAAiB,EAAE,WAAW;IAC9B,mBAAmB,EAAE,aAAa;IAClC,mBAAmB,EAAE,OAAO;IAC5B,QAAQ,EAAE,KAAK;IACf,SAAS,EAAE,WAAW;IACtB,kBAAkB,EAAE,YAAY;IAChC,WAAW,EAAE,OAAO;IACpB,aAAa,EAAE,OAAO;IACtB,iBAAiB,EAAE,OAAO;IAC1B,kBAAkB,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;IACtC,mBAAmB,EAAE,OAAO;IAC5B,MAAM,EAAE,OAAO;IACf,UAAU,EAAE,OAAO;IACnB,OAAO,EAAE,OAAO;IAChB,YAAY,EAAE,WAAW;CAC1B,CAAA;AAED,MAAM,UAAU,WAAW,CACzB,cAAoD;IAEpD,MAAM,MAAM,GAAG,SAAS,EAAE,CAAA;IAC1B,MAAM,EAAE,GAAG,KAAK,EAAE,CAAA;IAElB,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,aAAa,GAAgB;YACjC,GAAG,eAAe;YAClB,GAAG,cAAc;SAClB,CAAA;QAED,mCAAmC;QACnC,QAAQ,CAAC,aAAa,EAAE,CAAA;QAGxB,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,aAAa,CAAY,CAAA;QAExD,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,EAAE;YACpC,IAAI,CAAC,OAAO;gBAAE,OAAM;YACpB,MAAM,IAAI,GAAG,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAA;YAE9D,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;gBACtB,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;oBACvC,eAAe,CAAC,OAAO,CAAC,MAAM,EAAE;wBAC9B,MAAM;wBACN,KAAK;wBACL,EAAE;qBACH,CAAC,CAAA;gBACJ,CAAC,CAAC,CAAA;aACH;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAA;IAEpB,MAAM,aAAa,GAAG,WAAW,CAC/B,CAAC,KAA0B,EAAE,EAAE;QAC7B,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;IACjC,CAAC,EACD,CAAC,MAAM,CAAC,CACT,CAAA;IAED,OAAO,EAAE,aAAa,EAAE,CAAA;AAC1B,CAAC","sourcesContent":["import { useEditor } from '../lib/hooks/slate'\nimport { useUI } from '../lib/hooks/use-ui'\nimport React, { useCallback, useEffect } from 'react'\nimport type {\n  Action,\n  ActionKeybinds,\n  OptionalActionKeybinds,\n  PublicAction,\n} from '@cardbox-editor/core'\nimport { ActionsRegistry } from '../registries/actions'\nimport { keybinds } from '../registries/keybinds'\n\ntype AllKeybinds = ActionKeybinds<Action>\n\nconst defaultKeybinds: AllKeybinds = {\n  'delete-backward': 'backspace',\n  'insert-soft-break': 'shift+enter',\n  'insert-exit-break': 'enter',\n  'indent': 'tab',\n  'outdent': 'shift+tab',\n  'get-out-the-leaf': 'arrowright',\n  'make-bold': 'mod+b',\n  'make-italic': 'mod+i',\n  'make-underlined': 'mod+u',\n  'make-inline-code': ['mod+e', 'mod+`'],\n  'set-link-for-text': 'mod+k',\n  'copy': 'mod+c',\n  'copy-all': 'mod+a',\n  'paste': 'mod+v',\n  'exit-block': 'mod+enter',\n}\n\nexport function useKeybinds(\n  customKeybinds: OptionalActionKeybinds<PublicAction>\n) {\n  const editor = useEditor()\n  const ui = useUI()\n\n  useEffect(() => {\n    const finalKeybinds: AllKeybinds = {\n      ...defaultKeybinds,\n      ...customKeybinds,\n    }\n\n    // clear possible previous keybinds\n    keybinds.unregisterAll()\n\n    type Entries = Array<[Action, AllKeybinds[Action]]>\n    const entries = Object.entries(finalKeybinds) as Entries\n\n    entries.forEach(([action, keybind]) => {\n      if (!keybind) return\n      const keys = typeof keybind === 'string' ? [keybind] : keybind\n\n      for (const key of keys) {\n        keybinds.register(key, (editor, event) => {\n          ActionsRegistry.execute(action, {\n            editor,\n            event,\n            ui,\n          })\n        })\n      }\n    })\n  }, [customKeybinds])\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      keybinds.keyDown(event, editor)\n    },\n    [editor]\n  )\n\n  return { handleKeyDown }\n}\n"]}