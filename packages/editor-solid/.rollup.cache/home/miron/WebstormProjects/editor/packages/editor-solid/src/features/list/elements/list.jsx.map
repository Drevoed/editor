{"version":3,"file":"list.jsx","sourceRoot":"","sources":["list.tsx"],"names":[],"mappings":"AACA,OAAO,EACL,qBAAqB,EACrB,wBAAwB,EACxB,0BAA0B,GAC3B,MAAM,sBAAsB,CAAA;AAE7B,MAAM,eAAe,GAAG;IACtB,cAAc,EAAE,wBAAwB;IACxC,gBAAgB,EAAE,0BAA0B;CAC7C,CAAA;AAED,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAI/B,IAAW,EACX,WAA8B,CAAC,qBAAqB,EAAE,CAAC,EAC7C,EAAE;IACZ,MAAM,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC,CAAA;IAChC,OAAO,EAAE,CAAC,QAAQ,CAAa,CAAA;AACjC,CAAC,CAAA","sourcesContent":["import type { ListElement, ListItemElement } from './types'\nimport {\n  createListItemElement,\n  createOrderedListElement,\n  createUnorderedListElement,\n} from '@cardbox-editor/core'\n\nconst mapTypeToCreate = {\n  'ordered-list': createOrderedListElement,\n  'unordered-list': createUnorderedListElement,\n}\n\nexport const createListElement = <\n  TType extends ListElement['type'],\n  TElement extends ListElement = ReturnType<typeof mapTypeToCreate[TType]>\n>(\n  type: TType,\n  children: ListItemElement[] = [createListItemElement()]\n): TElement => {\n  const fn = mapTypeToCreate[type]\n  return fn(children) as TElement\n}\n"]}